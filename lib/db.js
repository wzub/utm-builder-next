import { collection, orderBy, query, where, doc, getDocs, addDoc, setDoc, serverTimestamp } from "firebase/firestore";
import { db } from "./firebase";

/**
 * Get all the sites from the sites collection
 * @returns An array of objects with the id and data for each document in the sites collection.
 */
export const getSites = async () => {
	const querySnap = await getDocs(collection(db, "sites"), orderBy("domain"));
	let links = [];

	querySnap.forEach((doc) => {
		links.push({ id: doc.id, ...doc.data() });
	});

	return links;
};

/**
 * Add a site to the sites collection
 * @param user - The user ID of who created the site.
 * @param url - The URL of the site as a URL Object
 * @returns The promise is returned.
 */
export const addSite = async (user, url) => {
	return await setDoc(doc(db, "sites", url.hostname), {
		created: serverTimestamp(),
		user: user,
		domain: url.hostname,
		url: url.origin
	});
};

/**
 * Get all the logged shortlinks generated by a user
 * @param user - The user ID
 * @returns An array of objects with the link data.
 */
export const getUserLinks = async (user) => {
	const q = query(
		collection(db, "links"),
		where("user", "==", user),
		orderBy("created", "desc")
	);

	const querySnap = await getDocs(q);
	let links = [];

	if (querySnap) {
		querySnap.forEach((doc) => {
			links.push({ id: doc.id, ...doc.data() });
		});

		return links;
	}
	else {
		console.log("Couldn't find links from this user");
		return;
	}
}

/**
 * Save a link to the database
 * @param user - The user ID
 * @param link - The link object that was created.
 */
export const saveLink = async (user, link) => {
	const savedLink = await addDoc(collection(db, "links"), {
		created: serverTimestamp(),
		user: user,
		domain: link.domain,
		link: link.link,
		shortlink: link.shortlink,
	});
	console.log("Saved link to db", savedLink.id);
}